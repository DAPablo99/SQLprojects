-- Розраховуємо категоріальні значення по акаунтам, а також основні метрики по емейлам. Робимо це окремо через різну логіку використання поля date. Об'єднуєм за допомогою UNION
-- Calculate categorical values by accounts, as well as key metrics by emails. We do this separately due to different logic in using the date field. Then, we combine the results using UNION
WITH categorical_values AS(


SELECT DATE_ADD(s.date, INTERVAL send_interval DAY) as date, sp.country, acc.send_interval ,acc.is_verified ,acc.is_unsubscribed
FROM `DA.account`acc
JOIN `DA.account_session` acs
ON acc.id = acs.account_id
JOIN `DA.session` s
ON acs.ga_session_id = s.ga_session_id
JOIN `DA.session_params` sp
ON acs.ga_session_id = sp.ga_session_id
GROUP BY date, sp.country, acc.send_interval, acc.is_verified, acc.is_unsubscribed


UNION ALL


SELECT DATE_ADD(s.date, INTERVAL es.sent_date DAY) as date, sp.country, acc.send_interval ,acc.is_verified ,acc.is_unsubscribed
FROM `DA.email_sent`es
JOIN `DA.account` acc
ON es.id_account = acc.id
JOIN `DA.account_session` acs
ON acc.id = acs.account_id
JOIN `DA.session` s
ON acs.ga_session_id = s.ga_session_id
JOIN `DA.session_params` sp
ON acs.ga_session_id = sp.ga_session_id
GROUP BY date, sp.country, acc.send_interval, acc.is_verified, acc.is_unsubscribed),
-- Рахуємо кількість створених акаунтів
-- Count the number of created accounts
account_count_separate AS (
SELECT
    DATE_ADD(s.date, INTERVAL acc.send_interval DAY) AS date,
    sp.country,
    acc.send_interval,
    acc.is_verified,
    acc.is_unsubscribed,
    COUNT(acc.id) AS account_cnt
  FROM `DA.account` acc
  JOIN `DA.account_session` acs ON acc.id = acs.account_id
  JOIN `DA.session` s ON acs.ga_session_id = s.ga_session_id
  JOIN `DA.session_params` sp ON acs.ga_session_id = sp.ga_session_id
  GROUP BY date, sp.country, acc.send_interval, acc.is_verified, acc.is_unsubscribed
),
-- Рахуємо кількість відправлених листів sent_msg ;open_msg — кількість відкритих листів;visit_msg — кількість переходів по листах;
-- Count the number of sent emails (sent_msg), opened emails (open_msg), and clicks on emails (visit_msg)
message_cnt_separeate AS (
SELECT
    DATE_ADD(s.date, INTERVAL es.sent_date DAY) AS date,
    sp.country,
    acc.send_interval,
    acc.is_verified,
    acc.is_unsubscribed,
    COUNT(es.id_message) AS sent_msg,
    COUNT(eo.id_message) AS open_msg,
    COUNT(ev.id_message) AS visit_msg
  FROM `DA.email_sent` es
  JOIN `DA.account` acc ON es.id_account = acc.id
  JOIN `DA.account_session` acs ON acc.id = acs.account_id
  JOIN `DA.session` s ON acs.ga_session_id = s.ga_session_id
  JOIN `DA.session_params` sp ON acs.ga_session_id = sp.ga_session_id
  LEFT JOIN `DA.email_open` eo ON es.id_message = eo.id_message
  LEFT JOIN `DA.email_visit` ev ON es.id_message = ev.id_message
  GROUP BY date, sp.country, acc.send_interval, acc.is_verified, acc.is_unsubscribed
)


SELECT * FROM (
  -- ранкування країн за загальною кількістю створених підписників в цілому по країні та загальною кількістю відправлених листів в цілому по країні
  -- Ranking countries by the total number of created subscribers across the country and the total number of sent emails across the country
SELECT *, DENSE_RANK() OVER( ORDER BY total_country_account_cnt DESC) as rank_total_country_account_cnt,
DENSE_RANK() OVER( ORDER BY total_country_sent_cnt DESC ) as rank_total_country_sent_cnt  
FROM(
  -- рахуємо додатково загальну кількість створених підписників в цілому по країні та загальну кількість відправлених листів в цілому по країні
  -- additionally calculate the total number of created subscribers across the country and the total number of sent emails across the country
SELECT *,SUM(account_cnt) OVER(PARTITION BY country) as total_country_account_cnt, SUM(sent_msg) OVER(PARTITION BY country) as total_country_sent_cnt
FROM(
  -- об'єднуємо categorical_values, account_count_separate  та message_cnt_separeate в одну таблицю за допомогою JOIN та виводимо необхідні поля
  -- combine categorical_values, account_count_separate, and message_cnt_separate into a single table using JOIN and output the necessary fields
SELECT
  c.date,
  c.country,
  c.send_interval,
  c.is_verified,
  c.is_unsubscribed,
  COALESCE(a.account_cnt, 0) AS account_cnt,
  COALESCE(m.sent_msg, 0) AS sent_msg,
  COALESCE(m.open_msg, 0) AS open_msg,
  COALESCE(m.visit_msg, 0) AS visit_msg
FROM categorical_values c
LEFT JOIN account_count_separate a
  ON c.date = a.date
  AND c.country = a.country
  AND c.send_interval = a.send_interval
  AND c.is_verified = a.is_verified
  AND c.is_unsubscribed = a.is_unsubscribed
LEFT JOIN message_cnt_separeate m
  ON c.date = m.date
  AND c.country = m.country
  AND c.send_interval = m.send_interval
  AND c.is_verified = m.is_verified
  AND c.is_unsubscribed = m.is_unsubscribed
GROUP BY c.date, c.country, c.send_interval, c.is_verified, c.is_unsubscribed,
         a.account_cnt, m.sent_msg, m.open_msg, m.visit_msg)))
WHERE rank_total_country_account_cnt <=10 OR rank_total_country_sent_cnt <= 10
ORDER BY rank_total_country_account_cnt,rank_total_country_sent_cnt;
